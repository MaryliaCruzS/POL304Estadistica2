[
  {
    "objectID": "semana11.html",
    "href": "semana11.html",
    "title": "Clase práctica Semana 11",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo."
  },
  {
    "objectID": "semana11.html#cargar-paquetes",
    "href": "semana11.html#cargar-paquetes",
    "title": "Clase práctica Semana 11",
    "section": "Cargar paquetes",
    "text": "Cargar paquetes\n\npacman::p_load(rio, dplyr, ggplot2)"
  },
  {
    "objectID": "semana11.html#importación-de-data",
    "href": "semana11.html#importación-de-data",
    "title": "Clase práctica Semana 11",
    "section": "Importación de data",
    "text": "Importación de data\n\ndf <- import(\"data/filmaffinity_dataset_limpio.xlsx\")"
  },
  {
    "objectID": "semana11.html#exploración-de-data",
    "href": "semana11.html#exploración-de-data",
    "title": "Clase práctica Semana 11",
    "section": "Exploración de data",
    "text": "Exploración de data\n\nstr(df)\n\n'data.frame':   119003 obs. of  9 variables:\n $ index     : num  0 1 2 3 4 5 6 7 8 9 ...\n $ Título    : chr  \"'49-'17\" \"10,000 Years B.C. (C)\" \"1812\" \"20.000 leguas de viaje submarino (C)\" ...\n $ Año       : num  1917 1916 1912 1907 1909 ...\n $ País      : chr  \"Estados Unidos\" \"Estados Unidos\" \"Rusia\" \"Francia\" ...\n $ Dirección : chr  \"Ruth Ann Baldwin\" \"Willis H. O'Brien\" \"Vasili Goncharov, Kai Hansen, Aleksandr Uralsky\" \"Georges Méliès\" ...\n $ Reparto   : chr  \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witting, George C. Pearce, Jean Hersholt, Donna Drew\" NA \"Pavel Knorr, Vasili Goncharov, Aleksandra Goncharova, Andrej Gromov, V. Serjozhinikov, A. Veskov\" \"Georges Méliès\" ...\n $ Nota      : num  NA 5.1 NA 6 5.3 NA 5.4 NA 4.6 NA ...\n $ Tipo filme: chr  \"Película\" \"Cortometraje\" \"Película\" \"Cortometraje\" ...\n $ Género    : chr  \"Western\" \"Comedia\" \"Drama\" \"Fantástico\" ..."
  },
  {
    "objectID": "semana11.html#gráfico-de-barras",
    "href": "semana11.html#gráfico-de-barras",
    "title": "Clase práctica Semana 11",
    "section": "Gráfico de barras",
    "text": "Gráfico de barras\n\n¿Qué variable podemos representar con un gráfico de barras?\nAntes de empezar a graficar, crearemos una tabla de frecuencias y porcentajes con count y mutate, como ya hemos aprendido. Esta tabla será usada con las funciones del paquete {ggplot2}. Este paquete trabaja con capas que van añadiendo configuraciones o elementos al gráfico. Probaremos primero una fórmula básica para generar gráficos de barras. Conectaremos cada capa con el símbolo +.\n\ntab_bars <- df %>%\n  count(`Tipo filme`) %>% \n  mutate(pct = n / sum(n) * 100)\n\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct)) + # <1>\n  geom_col() # <2>\n\n\n\n\n\nEn la función ggplot existe el argumento data donde ingresaremos nuestro objeto tab_bars. Los elementos que deseamos graficar irán en la función aes.\nIndicamos el tipo de gráfico con geom_col().\n\nProbemos añadir más capas tener una gráfico más presentable.\n\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct)) + # <1>\n  geom_col(fill = \"steelblue\") + # <2>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <3>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  theme_minimal() # <4>\n\n\n\n\n\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes.\nIndicamos el tipo de gráfico con geom_col(). Agregamos el argumento fill para indicar el color que rellenará las barras.\nCon labs (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\ntheme_minimal nos da una visualización más limpia quitando el fondo gris.\n\nLa versatilidad de {ggplot2} nos permite personalizar distintas combinaciones.\n\nggplot(tab_bars, aes(x = `Tipo filme`, y = pct, fill = `Tipo filme`)) + # <1>\n  geom_col() + # <2>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <3>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  coord_flip() + # <4>\n  theme_minimal() + # <5>\n  scale_fill_brewer(palette = \"Set3\") # <6>\n\n\n\n\n\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes. Añadimos en aes el argumento fill para colorear individualmente cada columna.\nIndicamos el tipo de gráfico con geom_col().\nCon labs (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\ncoord_flip gira los ejes para darnos barras horizontales.\ntheme_minimal nos da una visualización más limpia quitando el fondo gris.\nEn scale_fill_brewer indicamos una paleta de colores para usar.\n\nTambién podemos cruzar variables.\n\ndf2 <- df %>% \n  mutate(Nota_cat =  # <1>\n           case_when(Nota < 5 ~ \"Menos de 5\",\n                     Nota >= 5 ~ \"5 a más\",\n                     is.na(Nota) ~ \"Sin nota\"),\n         Nota_cat = # <2>\n           factor(Nota_cat, \n                  levels = c(\"Sin nota\", \"5 a más\", \"Menos de 5\"),\n                  ordered = TRUE))\n\ntab_bars2 <- df2 %>%\n  group_by(`Tipo filme`) %>% # <3>\n  count(Nota_cat) %>% \n  mutate(pct = round(n / sum(n) * 100, 0))\n\nggplot(tab_bars2, aes(x = `Tipo filme`, y = pct, fill = Nota_cat)) + # <4>\n  geom_col() + # <5>\n  labs(title = \"Gráfico 1: Tipo de filme (%)\", # <6>\n       x = \"Tipo de filme\",\n       y = \"Porcentaje\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) + # <7>\n  theme_minimal() + # <8>\n  scale_fill_brewer(palette = \"Set3\") # <9>\n\n\n\n\n\nCreamos una variable categórica a partir de Nota con mutate y case_when.\nVolvemos nuestra variable Nota_cat un factor para ordenar las categorías.\nCreamos nuestra tabla y añadimos la función group_by para calcular las frecuencias de Nota_cat dentro de cada tipo de filme.\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes. Añadimos en aes el argumento fill para colorear individualmente cada categoría de Nota_cat.\nIndicamos el tipo de gráfico con geom_col().\nCon labs (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\ngeom_text sirve para colocar las etiquetas de los valores.\ntheme_minimal nos da una visualización más limpia quitando el fondo gris.\nEn scale_fill_brewer indicamos una paleta de colores para usar."
  },
  {
    "objectID": "semana11.html#histograma",
    "href": "semana11.html#histograma",
    "title": "Clase práctica Semana 11",
    "section": "Histograma",
    "text": "Histograma\n¿Qué variable podemos representar con un histograma?\n\nggplot(df, aes(x = Año)) + # <1>\n  geom_histogram(fill = \"steelblue\") + # <2>\n  labs(title = \"Gráfico 2: Año de estreño de filmes\", # <3>\n       x = \"Año\",\n       y = \"Frecuencia\") +\n  theme_minimal() # <4>\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes (solamente x en este caso).\nIndicamos el tipo de gráfico con geom_histogram(). Agregamos el argumento fill para indicar el color que rellenará las barras.\nCon labs (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\ntheme_minimal nos da una visualización más limpia quitando el fondo gris.\n\nUna capa que nos permite cruzar la información para una visualización desagregada es facet_wrap.\n\nggplot(df, aes(x = Año)) + # <1>\n  geom_histogram(fill = \"steelblue\") + # <2>\n  facet_wrap(~ `Tipo filme`, scales = \"free\") +  # <3> \n  labs(title = \"Gráfico 2: Año de estreño de filmes\", # <4>\n       x = \"Año\",\n       y = \"Cantidad\") +\n  theme_minimal() # <5>\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes (solamente x en este caso).\nIndicamos el tipo de gráfico con geom_histogram(). Agregamos el argumento fill para indicar el color que rellenará las barras.\nDivide en facetas por grupo. Colocamos la variable de grupos después del símbolo ~.\nCon labs (abreviatura de labels), indicamos etiquetas para el título y ejes x e y.\ntheme_minimal nos da una visualización más limpia quitando el fondo gris."
  },
  {
    "objectID": "semana11.html#box-plot",
    "href": "semana11.html#box-plot",
    "title": "Clase práctica Semana 11",
    "section": "Box Plot",
    "text": "Box Plot\n¿Qué variable podemos representar con un box plot?\n\nggplot(df2, aes(y = Nota, x = `Tipo filme`, fill = `Tipo filme`)) + # <1>\n  geom_boxplot(show.legend = F) # <2>\n\n\n\n\n\nEn la función ggplot ingresamos la data (tab_bars) y los elementos que deseamos graficar en aes.\nIndicamos el tipo de gráfico con geom_boxplot()."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Acerca de",
    "section": "",
    "text": "En esta página podrás encontrar recursos para las clases de programación del curso."
  },
  {
    "objectID": "doc1.html",
    "href": "doc1.html",
    "title": "doc1",
    "section": "",
    "text": "hola."
  },
  {
    "objectID": "clasep2.html",
    "href": "clasep2.html",
    "title": "Clase práctica 2",
    "section": "",
    "text": "intro al r\npaquetes\nimportación de data\nexploración de data\nmanipulación de data\nTablas de frecuencia\nexportacion de data\nVisualización de datos: ggplot2, plotly\nintro al rmd\n\nformatos de output: html, pdf, word\nCombinando texto, tablas, gráficos\nResultado: elaboración de reportes\n\neste es un cambio drástico"
  },
  {
    "objectID": "clasep2.html#temas",
    "href": "clasep2.html#temas",
    "title": "Clase práctica 2",
    "section": "",
    "text": "intro al r\npaquetes\nimportación de data\nexploración de data\nmanipulación de data\nTablas de frecuencia\nexportacion de data\nVisualización de datos: ggplot2, plotly\nintro al rmd\n\nformatos de output: html, pdf, word\nCombinando texto, tablas, gráficos\nResultado: elaboración de reportes\n\neste es un cambio drástico"
  },
  {
    "objectID": "doc2.html",
    "href": "doc2.html",
    "title": "doc2",
    "section": "",
    "text": "Hi"
  },
  {
    "objectID": "semana10.html",
    "href": "semana10.html",
    "title": "Modelo de Regresión de Poisson",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  },
  {
    "objectID": "afactorial.html",
    "href": "afactorial.html",
    "title": "Análisis Factorial",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  },
  {
    "objectID": "clusters.html",
    "href": "clusters.html",
    "title": "Clusters",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  },
  {
    "objectID": "gml.html",
    "href": "gml.html",
    "title": "Modelo Lineal Múltiple",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  },
  {
    "objectID": "lb.html",
    "href": "lb.html",
    "title": "Regresión Logística",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  },
  {
    "objectID": "rp.html",
    "href": "rp.html",
    "title": "Regresión De Poisson",
    "section": "",
    "text": "Material para el ejercicio\n\n\n\nDescarga la carpeta .zip para acceder al material de esta sesión. Haga click en el siguiente enlace. No olvides unzipear el archivo.\n\n\n\nIntroducción\n¿Cómo funciona R?\n\n“Todo lo que existe en R es un objeto, todo lo que sucede en R es una función.”\n-John Chambers\n\nR es un lenguaje de programación que tradicionalmente opera como funciones anidadas. Por ejemplo:\n\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\ngsub(\"a\", \"A\", paste(\"mi\", supermercado))\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nSe podría comparar con una matrioska o muñeca rusa en la medida en que una función encapsula a otra función y así sucesivamente ejecutándose de adentro hacia afuera.\nLa manera moderna de programar en R es utilizando el operador %>% o pipeta. El mismo ejemplo se vería así:\n\nlibrary(dplyr)\nsupermercado <- c(\"manzana\", \"pera\", \"uva\")\nsupermercado %>% \n  paste(\"mi\", .) %>% \n  gsub(\"a\", \"A\", .)\n\n[1] \"mi mAnzAnA\" \"mi perA\"    \"mi uvA\"    \n\n\nLa pipeta se puede importar desde el paquete {dplyr} y se puede comparar con una tubería que pasa el resultado hacia la siguiente función, es decir, primero llamamos al objeto supermercado y luego aplicamos la función paste, y luego aplicamos la función gsub. Esta manera de programar se lee de arriba a abajo. El atajo para escribir la pipeta es ctrl + shift + m\nEn la práctica utilizaremos una combinación de la manera tradicional y moderna al momento de programar en R.\n\n\nPreparación\nPara iniciar un proyecto de R nos dirigiremos a la pestaña\nFile > New Project > New Directory > New Project > Create Project\nLuego creamos un nuevo archivo R markdown (.Rmd), nos dirigimos a la pestaña\nFile > New File > R Markdown > Ok\nPara crear un bloque de código en R podemos hacer click en el ícono verde con la letra C en la barra superior o utilizar el atajo ctrl + alt + i\nAhora instalamos los paquetes necesarios para el ejercicio de hoy.\n\ninstall.packages(\"pacman\")\npacman::p_load(tidyverse, rio)\n\n\n\nImportación de data\nEn esta clase, se importa la base de datos filmaffinity que contiene información sobre filmes publicados entre 1900 y 2020. Para mayor información revise el enlace.\n\nfilmaffinity <- rio::import(\"data/filmaffinity_dataset.xlsx\")\n\n\n\nExploración de data\nUna vez importada la base de datos a la sesión, es necesario explorarla para familiarizarnos con la información.\n\nfilmaffinity\n\n\n\n  \n\n\n\nLa base de filmes cuenta con 119,003 observaciones y 9 variables.\n\nfilmaffinity %>% \n  count(`Tipo filme`)\n\n\n\n  \n\n\n\nLa mayoría de observaciones corresponden al tipo filme con 73,651 observaciones.\n\nglimpse(filmaffinity)\n\nRows: 119,003\nColumns: 9\n$ ...1         <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ Título       <chr> \"'49-'17\", \"10,000 Years B.C. (C)\", \"1812\", \"20.000 legua…\n$ Año          <dbl> 1917, 1916, 1912, 1907, 1909, 1916, 1912, 1916, 1908, 191…\n$ País         <chr> \"Estados Unidos\", \"Estados Unidos\", \"Rusia\", \"Francia\", \"…\n$ Dirección    <chr> \"Ruth Ann Baldwin\", \"Willis H. O'Brien\", \"Vasili Goncharo…\n$ Reparto      <chr> \"Joseph W. Girard, Leo Pierson, William Dyer, Mattie Witt…\n$ Nota         <chr> \"--\", \"5,1\", \"--\", \"6,0\", \"5,3\", \"--\", \"5,4\", \"--\", \"4,6\"…\n$ `Tipo filme` <chr> \"Película\", \"Cortometraje\", \"Película\", \"Cortometraje\", \"…\n$ Género       <chr> \"Western\", \"Comedia\", \"Drama\", \"Fantástico\", \"Comedia\", \"…\n\n\nEn la base de datos se tienen las variables ...1, Título, Año, País, Dirección, Reparto, Nota, Tipo filme, Género.\n\n\nLimpieza de data\nLa primera columna que corresponde al index del filme en la tabla no tiene un nombre inteligible, por lo que procedemos a renombrar esta columna.\n\nfilmaffinity2 <- \n  filmaffinity %>% \n  rename(index = 1) # <1>\n\nfilmaffinity2\n\n\n\n  \n\n\n\n\nRenombrar la variable de la posición 1.\n\nLa variable Nota actualmente figura como character en vez de numeric dado que el punto decimal está representado como una , y los valores perdidos como --. Ajustemos esta variable para poder utilizarla como variable numérica.\n\nfilmaffinity3 <- \n  filmaffinity2 %>% \n  mutate(\n    Nota = gsub(\",\", \".\", Nota), # <1>\n    Nota = gsub(\"--\", NA, Nota), # <2>\n    Nota = as.numeric(Nota), # <3>\n  )\nfilmaffinity3\n\n\n\n  \n\n\n\n\nReemplazar el símbolo , por . en la columna Nota.\nReemplazar el símbolo -- por el valor perdido NA en la columna Nota.\nConvertir la columna Nota a variable numérica.\n\nLuego de aplicar este proceso podemos realizar operaciones aritméticas con la variable Nota:\n\ntab1 <- \n  filmaffinity3 %>% \n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab1\n\n\n\n  \n\n\n\nEl promedio de los filmes, considerando los puntuados, para el caso de miniserie es de 6.10.\nEn el caso de Estados Unidos, si se genera la misma tabla de frecuencias, se obtendría el seiguiente resultado:\n\ntab2 <- \n  filmaffinity3 %>% \n  filter(País %in% c(\"Estados Unidos\")) %>% # <1>\n  group_by(`Tipo filme`) %>% \n  summarise(Nota_promedio = mean(Nota, na.rm =T))\ntab2\n\n\n\n  \n\n\n\n\nSe filtra el valor \"Estados Unidos\" en la variable País.\n\nSe observa que, para el caso de miniseries, descendió a 5.99.\n\n\nExportación de data\nFinalmente, para exportar la tabla inicial sobre la nota promedio de los filmes a excel se puede utilizar la siguiente función del paquete {rio}:\n\ntab1 %>% \n  rio::export(\"data/tab1.xlsx\")\n\nUsaremos el mismo procedimiento para exportar la base que limpiamos:\n\nfilmaffinity3 %>% \n  rio::export(\"data/filmaffinity_dataset_limpio.xlsx\")\n\n\n\nEjercicio final\nResponda las siguientes preguntas:\n\nCuál es la película más antigua de Estados Unidos, Perú, Chile, España\nCuál es el puntaje promedio por tipo de estos países."
  }
]